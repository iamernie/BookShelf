<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">


<style>
  #bookDetailsModal .img-fluid {
    max-height: 400px; /* Adjust this height as needed */
    object-fit: cover;
  }
  #bookDetailsModal .notes-textarea {
    height: 250px; /* Match this height to the image's max-height */
    overflow-y: auto; /* Allows scrolling inside the textarea */
  }
  #bookDetailsModal .well {
    background-color: #f2f2f2;
    padding: 10px;
    border-radius: 5px;
  }
  #bookDetailsModal .modal-header {
    background-color: #007bff;
    color: white;
  }
  #bookDetailsModal h5 {
    font-weight: bold;
  }
  #bookDetailsModal #bookModalDetails p {
    margin-bottom: 5px;
    color: #333;
  }

  #bookInfo p {
    line-height: 2; /* Adjust line height for vertical alignment */
  }
  #bookInfo strong {
    margin-right: 10px; /* Space between label and dropdown */
  }
  #bookStatusDropdown {
    display: inline-block; /* Make dropdown inline */
    vertical-align: middle; /* Align dropdown vertically with the label */
    width: auto; /* Adjust as needed */
    min-width: 150px; /* Example width, adjust based on your content */
    max-width: 200px; /* Maximum width */
  }

  #bookModalSeriesLink, #bookModalBookNumber {
    display: inline; /* Ensures inline display */
    margin-right: 5px; /* Optional: Adds a small margin for spacing */
    white-space: nowrap; /* Prevents wrapping to a new line */
  }

  #bookModalBookNumber {
    font-size: 1.5em; /* Larger font size */
    text-align: center; /* Center-align the text */
    margin-top: 10px; /* Spacing between the image and the book number */
    /* Other styles as needed */
  }
  #bookModalBookNumber {
    font-size: 1.5em; /* Larger font size */
    text-align: center; /* Center-align the text */
    margin-top: 10px; /* Spacing between the image and the book number */
  }
  
  #bookModalRating {
    text-align: center; /* Center-align the stars */
    font-size: 2em; /* Even larger font size for stars */
    color: #ffc107; /* Bootstrap yellow color for filled stars */
    margin-top: 10px; /* Spacing between the book number and the rating */
  }
  
/* Style for clickable stars and 'no rating' icon */
.star {
  cursor: pointer;
  margin-right: 5px; /* Spacing between icons */
  color: #e4e5e9; /* Light grey color, or any color of your choice */
  font-size: .75em
}

/* Style for filled stars */
.fas.fa-star {
  color: #ffc107; /* Yellow color for filled stars */
}
  
</style>
<!-- bookcardModal.ejs -->
<div class="modal fade" id="bookDetailsModal" tabindex="-1" role="dialog" aria-labelledby="bookDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header" style="background-color: #6c757d; color: white;">
        <h5 class="modal-title" id="bookDetailsModalLabel">Book Details</h5>
        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-4">
            <img src="" alt="Book Cover" class="img-fluid" id="bookModalImage">
            <!-- Save the seriesi ID -->
              <input type="hidden" id="hiddenSeriesId" value="">
              <!-- New element for the book number -->
              <div id="bookModalBookNumber" style="display: none; font-size: 1.5em; text-align: center;"></div>
              <div id="bookModalRating" class="star-rating">
                 <!-- Add a clickable element for 0 stars -->
                <i class="far fa-star star" onclick="setRating(0)"></i>
              </div>
          </div>
          
          <div class="col-md-8">
            <!-- Tab Navigation -->
            <ul class="nav nav-tabs" id="bookModalTabs" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" id="book-info-tab" data-toggle="tab" href="#bookInfo" role="tab" aria-controls="bookInfo" aria-selected="true">Book Info</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="book-notes-tab" data-toggle="tab" href="#bookNotes" role="tab" aria-controls="bookNotes" aria-selected="false">Book Notes</a>
              </li>
              <li class="nav-item" id="series-notes-tab">
                <a class="nav-link" data-toggle="tab" href="#seriesNotes" role="tab" aria-controls="seriesNotes" aria-selected="false">Series Notes</a>
              </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content" id="bookModalTabContent">
              <!-- Book Info Tab -->
              <div class="tab-pane fade show active" id="bookInfo" role="tabpanel" aria-labelledby="book-info-tab">
                <h5 id="bookModalTitle" class="mt-2"></h5>
                <p>
                  <a href="#" id="bookModalSeriesLink" style="display: none;"></a>

                </p>
                <p><strong>Author:</strong> <span id="bookModalAuthor"></span></p>
                <p><strong>Narrator:</strong> <span id="bookModalNarrator"></span></p>
                <!-- Inside the Book Info Tab -->
                <p><strong>Status:</strong><select id="bookStatusDropdown" class="form-control d-inline-block" onchange="updateBookStatusAndDate(this.value)"></select></p>
                <p><strong>Release Date:</strong> <span id="bookModalReleaseDate"></span></p>
                <!-- Rating Section -->
                <p><strong>Rating:</strong></p>
                <div id="bookModalRating">
                  <!-- Star icons will go here -->
                </div>
                <p><strong>Summary:</strong></p>
                <div id="bookModalSummary" class="well"></div>
              </div>

              <!-- Book Notes Tab -->
              <div class="tab-pane fade" id="bookNotes" role="tabpanel" aria-labelledby="book-notes-tab">
                <textarea class="form-control" id="bookModalEditBookNotes" rows="4" onchange="saveBookNotes()"></textarea>
              </div>

              <!-- Series Notes Tab -->
              <div class="tab-pane fade" id="seriesNotes" role="tabpanel" aria-labelledby="series-notes-tab">
                <textarea class="form-control" id="bookModalEditSeriesNotes" rows="4" onchange="saveSeriesNotes()"></textarea>
              </div>

            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <!-- New Edit button -->
        <button type="button" class="btn btn-primary" id="editBookButton">Edit</button> 
        <button type="button" class="btn btn-success" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  let currentSeriesId = null; // Global variable to store the current series ID


function saveBookNotes() {
  const bookId = document.getElementById('bookDetailsModal').getAttribute('data-book-id');
  const notes = document.getElementById('bookModalEditBookNotes').value;

  fetch(`/books/${bookId}/update-notes`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ notes: notes }),
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Failed to save book notes');
    }
    console.log('Book notes updated successfully');
  })
  .catch(error => console.error('Error updating book notes:', error));
}

function updateBookStatusAndDate(newStatusId) {
  const modalElem = document.getElementById('bookDetailsModal');
  const bookId = modalElem.getAttribute('data-book-id');
  
  const completedDate = newStatusId == '2' ? new Date().toISOString() : null; // Assuming '2' is the ID for 'Read'

  fetch(`/books/${bookId}/update-status`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ 
      statusId: newStatusId,
      ...(completedDate && { completedDate }) // Spread operator to conditionally add completedDate
    }),
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Status update failed');
    }
    console.log('Status updated successfully');
    if (completedDate) {
      console.log(`Completed date set to ${completedDate}`);
    }
  })
  .catch(error => console.error('Error updating book status:', error));
}

function saveSeriesNotes() {
  if (!currentSeriesId) {
    console.error('Error: Series ID is null');
    return; // Stop execution if seriesId is null
  }

  const notes = document.getElementById('bookModalEditSeriesNotes').value;
  fetch(`/series/${currentSeriesId}/update-notes`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ comments: notes }),
  })
  .then(response => {
    if (response.ok) {
      console.log('Series notes updated successfully');
    } else {
      console.error('Failed to update series notes');
    }
  })
  .catch(error => console.error('Error updating series notes:', error));
}

function getSeriesId() {
  const seriesIdElement = document.getElementById('hiddenSeriesId');
  return seriesIdElement ? seriesIdElement.value : null;
}


// Function to get series ID from the book ID
function getSeriesIdFromBookId(bookId) {
  // Implement logic to retrieve the series ID for the given book ID
}


  function fillStars(rating) {
    const starsContainer = document.getElementById('bookModalRating');
    starsContainer.innerHTML = ''; // Clear out the current stars
  
    // Create the 'no rating' icon
    const noRatingIcon = document.createElement('i');
    noRatingIcon.className = 'far fa-times-circle star';
    noRatingIcon.onclick = function() { setRating(0); };
    noRatingIcon.title = 'No rating'; // Tooltip on hover
    starsContainer.appendChild(noRatingIcon);
  
    // Generate the star icons for ratings 1 to 4
    for (let i = 1; i <= 4; i++) {
      const starIcon = document.createElement('i');
      starIcon.className = i <= rating ? 'fas fa-star star' : 'far fa-star star';
      starIcon.onclick = function() { setRating(i); };
      starsContainer.appendChild(starIcon);
    }
  }
  
  
  function updateBookRating(newRating) {
    const bookId = document.getElementById('bookDetailsModal').getAttribute('data-book-id');
  
    // Add your fetch or AJAX call here to update the rating on the server
    fetch(`/books/${bookId}/update-rating`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ rating: newRating }),
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Rating update failed');
      }
      console.log('Rating updated successfully');
    })
    .catch(error => console.error('Error updating book rating:', error));
  }
  

  function setRating(newRating) {
    // Update the rating in the modal
    fillStars(newRating);
    
    // You would also need to implement the logic to update the rating on the server
    updateBookRating(newRating);
  }



  function populateStatusDropdown(selectedStatusId) {
    fetch('/status')
      .then(response => response.json())
      .then(statuses => {
        const statusDropdown = document.getElementById('bookStatusDropdown');
        statusDropdown.innerHTML = ''; // Clear existing options
  
        statuses.forEach(status => {
          const option = document.createElement('option');
          option.value = status.id;
          option.textContent = status.name;
          option.selected = status.id === selectedStatusId;
          statusDropdown.appendChild(option);
        });
      })
      .catch(error => console.error('Error fetching statuses:', error));
  }

  // Function to open the modal and populate its content
  function showBookDetails(bookId) {
    fetch('/books/details/' + bookId)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(book => {
        // Populate the modal with book data
        document.getElementById('bookModalImage').src = book.coverImageUrl || 'path/to/default/image.jpg'; // Add a default image path
        document.getElementById('bookModalTitle').textContent = book.title;
  
        // Author and Narrator
        document.getElementById('bookModalAuthor').textContent = (book.author ? book.author.name : 'Unknown');
        document.getElementById('bookModalNarrator').textContent = (book.narrator ? book.narrator.name : 'Unknown');

        // Series Link and Notes
        const seriesLinkElem = document.getElementById('bookModalSeriesLink');
        const seriesNotesTab = document.getElementById('series-notes-tab');
        const seriesNotesContent = document.getElementById('seriesNotes');
        if (book.series) {
          console.log('Part of a series');
          seriesLinkElem.style.display = 'block';
          seriesLinkElem.href = `/series/${book.seriesId}/books`;
          seriesLinkElem.textContent = book.series.title;
          seriesNotesTab.style.display = 'block';
          seriesNotesContent.style.display = 'block';

          const bookNumberElem = document.getElementById('bookModalBookNumber');
          if (book.bookNum !== undefined && book.bookNum !== null) {
            bookNumberElem.textContent = `Book #${book.bookNum}`;
            bookNumberElem.style.display = 'block'; // Show the book number
          } else {
            bookNumberElem.style.display = 'none'; // Hide the book number
          }

          fetchSeriesComments(book.seriesId);
        } else {
          console.log('NOT Part of a series');
          seriesLinkElem.style.display = 'none';
          seriesNotesTab.style.display = 'none';
          seriesNotesContent.style.display = 'none';
        }

        // Store the book ID in the modal's data attribute
        document.getElementById('bookDetailsModal').setAttribute('data-book-id', bookId);

        // Populate status dropdown
        populateStatusDropdown(book.statusId);

        // Additional Details
        document.getElementById('bookModalReleaseDate').textContent = book.releaseDate ? new Date(book.releaseDate).toLocaleDateString() : 'N/A';
        // Call this with the current rating of the book
        fillStars(book.rating);
        document.getElementById('bookModalSummary').textContent = book.summary || 'No summary available';
        document.getElementById('bookModalEditBookNotes').value = book.comments || '';
  
         // Add an event listener to the Edit button to navigate to the edit page
    const editButton = document.getElementById('editBookButton');
    editButton.onclick = function() {
      window.location.href = `/books/edit/${bookId}`; // Navigate to the edit screen
    };

        $('#bookDetailsModal').modal('show');
      })
      .catch(error => console.error('Error fetching book details:', error));
  }
  

  function updateBookStatus(newStatusId) {
    const modalElem = document.getElementById('bookDetailsModal');
    const bookId = modalElem.getAttribute('data-book-id');
    
    fetch(`/books/${bookId}/update-status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ statusId: newStatusId }),
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Status update failed');
      }
      console.log('Status updated successfully');
    })
    .catch(error => console.error('Error updating book status:', error));
  }
  
  // New function to fetch and populate series comments
function fetchSeriesComments(seriesId) {
  console.log("fSC - Series id:" + seriesId);
  currentSeriesId = seriesId; // Set the global variable

  fetch(`/series/details/${seriesId}`) // Adjust the endpoint as needed
    .then(response => response.json())
    .then(series => {
      document.getElementById('bookModalEditSeriesNotes').value = series.comments || '';
    })
    .catch(error => console.error('Error fetching series details:', error));
}

document.addEventListener('DOMContentLoaded', function () {
  // Assuming you're using Bootstrap 5, if it's Bootstrap 4, it would be 'hidden.bs.modal'
  var bookDetailsModal = document.getElementById('bookDetailsModal');
  bookDetailsModal.addEventListener('hidden.bs.modal', function (event) {
    // This will refresh the page, you can also use more complex logic here if needed
    window.location.reload();
  });
});
</script>
